{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Shinyobservable","text":"<p>Embed Observable Notebooks in Shiny for Python.</p> <p>Shinyobservable makes it a breeze to integrate libraries such as D3.</p> <p>Create any kind of JavaScript visualizations and let Shiny handle your data and interactivity. </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Embed entire notebooks</li> <li>Embed selected cells only</li> <li>Update data cells to update visualizations</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install shinyobservable\n\n# Dev\npip install git+https://github.com/eodaGmbH/py-shiny-shinyobservable\n</code></pre>"},{"location":"#quickstart","title":"Quickstart","text":"<pre><code>from htmltools import a\nfrom shiny.express import ui\nfrom shinyobservable import Observable, ObservableRenderer\n\nNOTEBOOK = \"https://observablehq.com/@d3/zoomable-sunburst\"\n\nui.h1(\"Observable Notebook in Shiny\")\nui.div(a(NOTEBOOK, href=NOTEBOOK, target=\"_blank\"))\nui.hr()\n\n\n# Embed selected cells\n@ObservableRenderer\ndef render_cells():\n    return Observable(NOTEBOOK, cells=[\"chart\"])\n\n\n# Include entire notebook\n# @ObservableRenderer\ndef render_notebook():\n    return Observable(NOTEBOOK)\n</code></pre> <p>Enjoy your notebook!</p> <p></p>"},{"location":"api/","title":"API Docs","text":""},{"location":"api/#shinyobservable.Observable","title":"<code>shinyobservable.Observable</code>","text":"<p>             Bases: <code>object</code></p> <p>Create an Observable notebook instance</p> <p>Parameters:</p> Name Type Description Default <code>notebook</code> <code>str</code> <p>The URL of the notebook to be embedded.</p> required <code>cells</code> <code>list</code> <p>The cells to be embedded. If <code>None</code>, the entire notebook is embedded.</p> <code>None</code> <code>width</code> <code>int | str</code> <p>The width of the notebook element.</p> <code>None</code> Source code in <code>shinyobservable/_core.py</code> <pre><code>class Observable(object):\n    \"\"\"Create an Observable notebook instance\n\n    Args:\n        notebook: The URL of the notebook to be embedded.\n        cells: The cells to be embedded. If `None`, the entire notebook is embedded.\n        width: The width of the notebook element.\n    \"\"\"\n\n    data = dict()\n\n    def __init__(\n        self, notebook: str, cells: list = None, width: int | str = None\n    ) -&gt; None:\n        if isinstance(width, int):\n            width = f\"{width}px\"\n\n        self.width = width\n        if \"//api\" not in notebook:\n            notebook = (\n                f\"{BASE_API_URL}/{relpath(notebook, BASE_URL)}.js?v={API_VERSION}\"\n            )\n\n        self.notebook = notebook\n        self.cells = cells\n\n    def redefine(self, **kwargs) -&gt; Observable:\n        \"\"\"Redefine cells of the embedded notebook\n\n        Examples:\n            &gt;&gt;&gt; # Redefine the data cell of a notebook\n            &gt;&gt;&gt; nb = Observable(\"some-notebook\").redefine(\n            ...     data=[\n            ...         dict(x=1, y=2),\n            ...         dict(x=2, y=4)\n            ...     ]\n            ... )\n            &gt;&gt;&gt;\n        \"\"\"\n        self.data = kwargs\n        return self\n\n    def to_dict(self):\n        return dict(\n            notebook=self.notebook, cells=self.cells, data=self.data, width=self.width\n        )\n</code></pre>"},{"location":"api/#shinyobservable.Observable.redefine","title":"<code>redefine(**kwargs)</code>","text":"<p>Redefine cells of the embedded notebook</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Redefine the data cell of a notebook\n&gt;&gt;&gt; nb = Observable(\"some-notebook\").redefine(\n...     data=[\n...         dict(x=1, y=2),\n...         dict(x=2, y=4)\n...     ]\n... )\n&gt;&gt;&gt;\n</code></pre> Source code in <code>shinyobservable/_core.py</code> <pre><code>def redefine(self, **kwargs) -&gt; Observable:\n    \"\"\"Redefine cells of the embedded notebook\n\n    Examples:\n        &gt;&gt;&gt; # Redefine the data cell of a notebook\n        &gt;&gt;&gt; nb = Observable(\"some-notebook\").redefine(\n        ...     data=[\n        ...         dict(x=1, y=2),\n        ...         dict(x=2, y=4)\n        ...     ]\n        ... )\n        &gt;&gt;&gt;\n    \"\"\"\n    self.data = kwargs\n    return self\n</code></pre>"},{"location":"api/#shinyobservable.ObservableRenderer","title":"<code>shinyobservable.ObservableRenderer</code>","text":"<p>             Bases: <code>Renderer[Observable]</code></p> <p>A decorator for a function that returns an <code>Observable</code> object</p> Source code in <code>shinyobservable/render.py</code> <pre><code>class ObservableRenderer(Renderer[Observable]):\n    \"\"\"A decorator for a function that returns an `Observable` object\"\"\"\n\n    def auto_output_ui(self) -&gt; Tag:\n        return output_observable(self.output_id)\n\n    async def transform(self, value: Observable) -&gt; Jsonifiable:\n        return value.to_dict()\n</code></pre>"},{"location":"api/#shinyobservable.output_observable","title":"<code>shinyobservable.output_observable(id)</code>","text":"<p>Create an output control for an <code>Observable</code> object</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>An output id.</p> required Source code in <code>shinyobservable/ui.py</code> <pre><code>def output_observable(id: str) -&gt; Tag:\n    \"\"\"Create an output control for an `Observable` object\n\n    Arguments:\n        id: An output id.\n    \"\"\"\n    return ui.div(\n        observable_bindings_dep,\n        # Use resolve_id so that our component will work in a module\n        id=resolve_id(id),\n        class_=\"shiny-observable-output\",\n    )\n</code></pre>"},{"location":"api/#shinyobservable.ObservableContext","title":"<code>shinyobservable.ObservableContext</code>","text":"<p>             Bases: <code>object</code></p> <p>Create an Observable context instance</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The output id of the notebook instance to be updated.</p> required <code>session</code> <code>Session</code> <p>A Shiny session. If <code>None</code>, the active session is used.</p> <code>None</code> Source code in <code>shinyobservable/_context.py</code> <pre><code>class ObservableContext(object):\n    \"\"\"Create an Observable context instance\n\n    Arguments:\n        id: The output id of the notebook instance to be updated.\n        session: A Shiny session. If `None`, the active session is used.\n    \"\"\"\n\n    data = dict()\n\n    def __init__(self, id: str, session: Session = None) -&gt; None:\n        self.id = id\n        self._session = require_active_session(session)\n        self._message_queue = []\n\n    async def __aenter__(self):\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.render()\n\n    def redefine(self, **kwargs) -&gt; None:\n        \"\"\"Redefine cells of the embedded notebook\"\"\"\n        self.data = kwargs\n\n    async def render(self):\n        await self._session.send_custom_message(\n            f\"observable-{self.id}\", {\"id\": self.id, \"data\": self.data}\n        )\n</code></pre>"},{"location":"api/#shinyobservable.ObservableContext.redefine","title":"<code>redefine(**kwargs)</code>","text":"<p>Redefine cells of the embedded notebook</p> Source code in <code>shinyobservable/_context.py</code> <pre><code>def redefine(self, **kwargs) -&gt; None:\n    \"\"\"Redefine cells of the embedded notebook\"\"\"\n    self.data = kwargs\n</code></pre>"},{"location":"getting_started/interactivity/","title":"Interactivity","text":"<pre><code>import random\nimport string\n\nfrom htmltools import a\nfrom shiny import reactive\nfrom shiny.express import input, ui\nfrom shinyobservable import Observable, ObservableContext, ObservableRenderer\n\nNOTEBOOK = \"https://observablehq.com/@d3/bar-chart-transitions/2\"\n\nui.h1(\"Observable Notebook in Shiny\")\nui.div(a(NOTEBOOK, href=NOTEBOOK, target=\"_blank\"))\nui.hr()\n\n\ndef create_data():\n    return [\n        dict(letter=letter, frequency=random.uniform(0, 1))\n        for letter in string.ascii_uppercase[\n            random.randint(0, 3) : random.randint(20, 25)\n        ]\n    ]\n\n\ncells = [\"viewof order\", \"chart\", \"data\"]\n\n\n@ObservableRenderer\ndef render_notebook():\n    return Observable(NOTEBOOK, cells=cells).redefine(\n        # data=create_data(),\n        data=[\n            dict(letter=\"A\", frequency=0.1),\n            dict(letter=\"B\", frequency=0.8),\n            dict(letter=\"C\", frequency=0.6),\n        ],\n    )\n\n\nwith ui.div(style=\"padding-top: 10px;\"):\n    ui.input_action_button(\"update_data\", \"Update data\")\n\n\n@reactive.Effect\n@reactive.event(input.update_data)\nasync def update_data():\n    async with ObservableContext(\"render_notebook\") as nb:\n        nb.redefine(data=create_data())\n</code></pre>"},{"location":"getting_started/redefine_data/","title":"Redefine data cells","text":"<pre><code>import requests\nfrom htmltools import a\nfrom shiny.express import ui\nfrom shinyobservable import Observable, ObservableRenderer\n\nNOTEBOOK = \"https://observablehq.com/@d3/zoomable-sunburst\"\n\ndata = requests.get(\n    \"https://raw.githubusercontent.com/observablehq/examples/main/custom-data/population.json\"\n).json()\n\nprint(data)\n\nui.h1(\"Observable Notebook in Shiny\")\nui.div(a(NOTEBOOK, href=NOTEBOOK, target=\"_blank\"))\nui.hr()\n\n\n@ObservableRenderer\ndef render_cells():\n    # Update the 'data' cell with the data downloaded above\n    return Observable(NOTEBOOK, cells=[\"chart\"]).redefine(data=data)\n</code></pre>"}]}